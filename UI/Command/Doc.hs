module UI.Command.Doc (
	help, man
)where

import Data.Default
import Data.Char (toUpper)

import System.Locale (defaultTimeLocale)
import Data.Time.Format (formatTime)
import Data.Time.Clock (getCurrentTime)

import Text.Printf (printf)

import UI.Command.Application
import UI.Command.Command
import UI.Command.Render

------------------------------------------------------------
-- internal subcommands
--

internalSubs = [helpSub, manSub]

------------------------------------------------------------
-- Help
--

helpSub :: SubCommand
helpSub = def {subName = "help", subShortDesc = "Display help for a specific subcommand"}

help :: Application -> [String] -> IO ()
help cmd args = mapM_ putStr $ longHelp cmd args

longHelp :: Application -> [String] -> [String]
-- | "cmd help" with no arguments: Give a list of all subcommands
longHelp cmd [] =
    [appShortDesc cmd ++ "\n"] ++
    ["Usage: " ++ (appName cmd) ++ " [--version] [--help] command [args]\n\n"] ++
    [indent 2 (appLongDesc cmd), "\n"] ++
    map (categoryHelp cmd) (appCategories cmd) ++
    [internalHelp cmd] ++
    ["\nPlease report bugs to <" ++ appBugEmail cmd ++ ">\n"]

-- | "cmd help command": Give command-specific help
longHelp cmd (command:_) = contextHelp cmd command m
  where m = filter (\x -> subName x == command) (appSubs cmd)

-- | Provide synopses for a specific category of commands
categoryHelp :: Application -> String -> String
categoryHelp cmd c = c ++ ":\n" ++ unlines (map itemHelp items) ++ "\n"
     where
        items = filter (\x -> subCategory x == c) (appSubs cmd)

-- | Provide synopses for internal commands
internalHelp :: Application -> String
internalHelp cmd = unlines $ "Miscellaneous:" : map itemHelp internalSubs

-- | One-line format for a command
itemHelp i = printf "  %-14s%s" (subName i) (subShortDesc i)

-- | Provide detailed help for a specific command
contextHelp :: Application -> [Char] -> [SubCommand] -> [String]
contextHelp cmd command [] = longHelp cmd [] ++ contextError
  where contextError = ["\n*** \"" ++ command ++ "\": Unknown command.\n"]
contextHelp cmd command (item:_) = synopsis ++ usage ++ description ++ examples
  where usage = ["Usage: " ++ appName cmd ++ " " ++ command ++ hasOpts command ++ "\n"]
        hasOpts "help" = " command"
        hasOpts _ = " [options]"
        synopsis = [(appName cmd) ++ " " ++ command ++ ": " ++ subSynopsis item ++ "\n"]
        description = case (subShortDesc item) of
                    "" -> []
                    _  -> ["\n" ++ indent 2 (subShortDesc item)]
        examples = case (subExamples item) of
                     [] -> []
                     _  -> ["\nExamples:"] ++
                           flip map (subExamples item) (\(desc,opts) ->
                             "\n  " ++ desc ++ ":\n    " ++ (appName cmd) ++ " " ++ command ++
                             " " ++ opts ++ "\n")

------------------------------------------------------------
-- man
--

manSub :: SubCommand
manSub = def {subName = "man", subShortDesc = "Generate Unix man page for specific subcommand"}

man :: Application -> [String] -> IO ()
man cmd args = do
        currentTime <- getCurrentTime
	let dateStamp = formatTime defaultTimeLocale "%B %Y" currentTime
	putStrLn . concat $ longMan cmd dateStamp args

manSH :: String -> String
manSH s = "\n.SH " ++ s ++ "\n\n"

headerMan :: Application -> String -> [String]
headerMan cmd dateStamp = [unwords [".TH", u, "1", quote dateStamp, quote (appName cmd), project, "\n"]]
    where
        u = map toUpper (appName cmd)
	project | appProject cmd == def = ""
	        | otherwise = quote $ appProject cmd

synopsisMan :: Application -> String -> [SubCommand] -> [String]
synopsisMan cmd _ [] =
    [manSH "SYNOPSIS", ".B ", appName cmd, "\n.RI SUBCOMMAND\n[\n.I OPTIONS\n]\n.I filename ...\n\n"]
synopsisMan cmd command (item:_) =
    [manSH "SYNOPSIS", ".B ", appName cmd, "\n.RI ", command, "\n", hasOpts command, "\n"]
  where hasOpts "help" = ".I <subcommand>\n"
        hasOpts "man" = ".I <subcommand>\n"
        hasOpts _ = "[\n.I OPTIONS\n]\n"

authorsMan :: Application -> String -> [String]
authorsMan cmd command = manSH "AUTHORS" : a ++ g ++ e
  where
    n = appName cmd
    a | appAuthors cmd == [] = []
      | otherwise = [n ++ " was written by ", englishList $ appAuthors cmd, "\n\n"]
    g = ["This manual page was autogenerated by\n.B " ++ n ++ " man" ++ space command ++ ".\n\n"]
    e | appBugEmail cmd == "" = []
      | otherwise = ["Please report bugs to <" ++ appBugEmail cmd ++ ">\n"]
    space "" = ""
    space c = ' ':c

descMan :: String -> [String]
descMan desc = [manSH "DESCRIPTION", desc, "\n"]

longMan :: Application -> String -> [String] -> [String]
longMan cmd dateStamp [] =
        headerMan cmd dateStamp ++
	[manSH "NAME"] ++
        [appName cmd, " \\- ", appShortDesc cmd, "\n\n"] ++
        synopsisMan cmd "SUBCOMMAND" [] ++
        descMan (".B " ++ appName cmd ++ "\n" ++ appLongDesc cmd) ++
        map (categoryMan cmd) (appCategories cmd) ++
	authorsMan cmd "" ++
        seeAlsoMan cmd

longMan cmd dateStamp (command:_) = contextMan cmd dateStamp command m
    where
        m = filter (\x -> subName x == command) (appSubs cmd)

-- | Provide a list of related commands
seeAlsoMan :: Application -> [String]
seeAlsoMan cmd
        | appSeeAlso cmd == def = []
        | otherwise = [manSH "SEE ALSO" ++ ".PP\n"] ++
                      map (\x -> "\\fB"++x++"\\fR(1)\n") (appSeeAlso cmd)

-- | Provide synopses for a specific category of commands
categoryMan :: Application -> String -> String
categoryMan cmd c = manSH (map toUpper c) ++ concat (map itemMan items) ++ "\n"
  where items = filter (\x -> subCategory x == c) (appSubs cmd)
        itemMan i = printf ".IP %s\n%s\n" (subName i) (subShortDesc i)

contextMan :: Application -> String -> [Char] -> [SubCommand] -> [String]
contextMan cmd dateStamp _ [] = longMan cmd dateStamp []
contextMan cmd dateStamp command i@(item:_) =
        headerMan cmd dateStamp ++
        synopsisMan cmd command i ++
        descMan (subSynopsis item) ++
        description ++
        examples ++
	authorsMan cmd command
    where
        description | subShortDesc item == "" = []
                    | otherwise = ["\n" ++ subShortDesc item]
        examples | subExamples item == [] = []
                 | otherwise = manSH "EXAMPLES" :
                               flip map (subExamples item) (\(desc, opts) ->
                                 ".PP\n" ++ desc ++ ":\n.PP\n.RS\n\\f(CW" ++
                                 appName cmd ++ " " ++ command ++ " " ++
                                 opts ++ "\\fP\n.RE\n")
